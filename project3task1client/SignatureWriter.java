package project3task1client;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

/**
 * October 2016
 *
 * This class is able to writeSignature using a the temperature data being
 * transmitted and that sensor's private keys. It concatenates the data to be
 * transmitted into a single String, hashes the String using SHA-1, and RSA
 * encodes the hashed String using the sensor's private keys.
 *
 * @author Rebecca Dilla
 */
public class SignatureWriter {

    BigInteger e1; //Sensor 1's public key
    BigInteger d1; //Sensor 1's private key
    BigInteger n1; //Sensor 1's public key
    BigInteger e2; //Sensor 2's public key
    BigInteger d2; //Sensor 2's private key
    BigInteger n2; //Sensor 2's public key

    public SignatureWriter() {
        //Initializing Sensor 1's public key e
        e1 = new BigInteger("65537");

        //Initializing Sensor 1's private key d
        d1 = new BigInteger("339177647280468990599683753475404338964037287357290649639740920420195763493261892674937712727426153831055473238029100340967145378283022484846784794546119352371446685199413453480215164979267671668216248690393620864946715883011485526549108913");

        //Initializing Sensor 1's public key n
        n1 = new BigInteger("2688520255179015026237478731436571621031218154515572968727588377065598663770912513333018006654248650656250913110874836607777966867106290192618336660849980956399732967369976281500270286450313199586861977623503348237855579434471251977653662553");

        //Initialising Sensor 2's public key e
        e2 = new BigInteger("65537");

        //Initialising Sensor 2's private key d
        d2 = new BigInteger("3056791181023637973993616177812006199813736824485077865613630525735894915491742310306893873634385114173311225263612601468357849028784296549037885481727436873247487416385339479139844441975358720061511138956514526329810536684170025186041253009");

        //Initializing Sensor 2's public key n
        n2 = new BigInteger("3377327302978002291107433340277921174658072226617639935915850494211665206881371542569295544217959391533224838918040006450951267452102275224765075567534720584260948941230043473303755275736138134129921285428767162606432396231528764021925639519");
    }

    /*
    This method returns a signature string generated by concatonating the sensor data,
    hashing the bytes of that string, and encrypting those bytes with the sensor's 
    private keys
     */
    public String writeSignature(String sensorID, String timeStamp, String type, String temperature) {

        //Concatonate the data to be transmitted to the webservice into a single String
        String toSign = sensorID + timeStamp + type + temperature;

        //Convert that String into a byte array
        byte[] sig;
        sig = toSign.getBytes();

        try {
            //Create a MessageDigest to handle hashing
            MessageDigest md = MessageDigest.getInstance("SHA-1");
            md.update(sig);//update the MessgeDigest with the byte array

            //Convert the hashed value into byte array
            byte[] hashValue = md.digest();

            /*
             Move each element in the array right, and make the first byte of the array 
             a zero, so that the value to be encrypted is positive
             */
            byte[] sig2 = new byte[hashValue.length + 1]; //create a new array that is one element longer than the original
            sig2[0] = 0; //assign the first index a value of 0

            //Move each element in the old array into the new array, one index to the right of it's 
            //index in the original array
            for (int i = 1; i < sig2.length; i++) {
                sig2[i] = hashValue[i - 1];
            }

            BigInteger hashedBytes = new BigInteger(sig2);//convert the byte array into a BigInteger
            BigInteger signature;//Create a new BigInteger to hold the encrypted signature

            /*
            Encrypt data from sensor 1 with sensor 1's private keys using RSA
             */
            if (sensorID.equals("1")) {
                signature = hashedBytes.modPow(d1, n1);
                return signature.toString(); //return the encrypted string

                /*
                Encrypt data from sensor 2 with sensor 2's private keys using RSA
                 */
            } else if (sensorID.equals("2")) {
                signature = hashedBytes.modPow(d2, n2);
                return signature.toString(); //return the encrypted string
            }

        } catch (NoSuchAlgorithmException e) {
            System.err.println("Exception caught: " + e);
        }
        //If the sensorID is invalid, return null
        return null;
    }
}
